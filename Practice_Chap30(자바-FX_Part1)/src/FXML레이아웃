	3. FXML 레이아웃
	레이아웃
	-Scene엔 다양한 컨트롤이 포함되는데 이들을 배치하는 것이 레이아웃이다.
	
	프로그램적 레이아웃(간단한 프로그램인 경우 상관없다)
	-자바코드로만 개발하기 때문에, 다른 언어를 익힐 필요가 없다.
	-코드를 잘 정리하지 않으면 난해한 프로그램이 될 확률이 높아진다.
	-개발자가 직접 작성하므로 디자이너와 협력하여 개발하는 것에 어려움이 있다.
	-개발 완료 후 간단한 레이아웃 변경이나 스타일 변경이라도 자바 소스 수정 후 재 컴파일을 해야하므로 상당히 유지보수에 번거롭다
	
	
	FXML레이아웃 (규모있는 프로그램 개발시 사용)
	-FXML은 XML기반의 마크업 언어이다.(HTML태그 작성과 유사하다)
	-JavaFX UI 레이아웃을 자바 코드에서 분리해서 태그로 선언하는 방법을 제공한다.
	-웹 애플리케이션 및 안드로이드 앱 개발 방법과 유사핟.
	-디자이너와 협업 가능하다.
	-간단한 레이아웃 변경이나 스타일 변경 시 자바 소스 수정할 필요가 없다(유지보수 관리)
	-레이아웃 비슷한 장면(Scene)들간에 재사용 가능하다.(FXML의 재사용 가능)
	
	
	XML(extensible markup language)
	
	
	레이아웃 여백 : 마진(margin)과 패딩(padding)
	마진은 바깥 여백, 패딩은 안쪽 여백
	
	Inset = 여백을 만드는 객체
	
	
	FXML작성규칙
	-FXML태그는 자바코드로 변환되어 실행되므로 자바코드와 매핑관계가 존재.
	-매핑관계만 잘 이해하면 자바FX API를 참조해서 FXML태그를 쉽게 작성가능
	-패키지 선언(위치중요) 해당 클래스가 존재하지 않으면 에러
	
	//태그명은 클래스명이거나 setter일 경우가 많다.
	ObservableList = 컨테이너 안에 배치되므로 자식개념(childeren)과 비슷하다.
	
	패키지 선언
	자바코드 import javafx.scene.layout.HBOX
	FXML태그 <?import javafx.scene.layout.HBOX> 태그
	<?xml version="1.0" encoding="UTF-8"?> XML선언 부분 - 항상 고정적으로 들어가는 부분
	
	<루트컨테이너 xmlns:fx="http//javafx.com/fxml"> //네임스페이스 선언부(태그는 고유한 이름이 존재한다. 하여 다른 태그와 충돌을 피하기 위하여 fx라는 접두사를 사용해서 붙여준다)
	
	
	자바 코드
	Button button = new Button();
	button.setText("확인")
	
	FXML(Setter태그)
	<Button>
	<text>확인</text>
	</Button>
	
	FXML(Setter속성)
	<Button text = "확인"/>
	
	setText는 매개값이 String이므로 문자열로 작성할 수 잇다
	String이 아닌 경우는 태그로 작성해야한다.
	
	큰따옴표를 코테이션 또는 떠블코테이션
	작은따옴표는 아포스 또는 싱글코테이션
	
	객체 선언 1번째 방법
	주로 래퍼클래스에 사용하며, 콤보박스에 사용한다.
	<클래스 fx:value = "값">
	
	자바 코드 String.valueOf("Hello, World!"); 
	FXML <String fx:value="Hello, World!");
	
	객체 선언 2번째 방법
	클래스에 정의된 상수 값을 얻고 싶을때 사용
	<클래스 fx:constant="상수">
	자바코드
	Button button = new Button();
	button.setMaxWidth(
		Double.MAX_VALUE
		);
	FXML
	<Button>
	<maxWidth>
	<Double fx:constant="MAX_VALUE"/>
	</maxWidth>
	</Button>
	
	객체 선언 3번째 방법
	<클래스 fx:factory="정적메서드"> --매우 빈번하게 사용된다.
	정적 메서드로만 객체를 얻어야 하는경우
	자바코드
	ComboBox combo = new ComboBox();
	combo.setItems(
		FXCollections.observableArrayList(
		"공개","비공개"
		)
	);
	
	FXML
	<ComboBox>
	<items>
	<FXCollections fx:factory="observableArrayList">
	<String fx:value="공개"/>
	<String fx:value="비공개"/>
	</FXCollections>
	</items>
	</ComboBox>
	
	FXML 로딩과 Scene생성
	레이아웃 작업 후 Scene에 설정하는 작업을 칭함
	FXML파일을 읽어 들여 선언된 내용을 객체화 하는 것을 말한다.
	FXMLLoader의 load()메서드 이용(2가지 방법이 있다) - 두가지 다 알아야한다.
	
	1번째 방법 (정적 메서드 이용)
	//load의 매개값은 URL이다
	Parent parent = FXMLLoader.load(getClass().getResource("xxx.fxml"));
	2번째 방법(인스턴스 생성하여 이용) - 이벤트 처리할 때 사용 및 컨트롤러 지정시
	FXMLLoader loader = new FXMLloader(getClass().getResource("xxx.fxml"));
	Parent root = (Parent)loader.load();
	
	load()가 리턴하는 실제 객체 FXML파일에서 루트 태그로 선언된 컨테이너이다.
	HBox hbox = (Hbox)FXMLLoader.load(getClass().getResource("xxx.fxml"));
	
	Scene객체 생성
	FXML 로딩 후 얻은 루트 컨테이너는 Scene을 생성 할 때 매개 값으로 사용된다.
	Scene scene = new Scene(root) //Scene의 매개값은 루트컨테이너가 된다.
	
	